#!/bin/sh
#^--- not to be executed directly, this is just for editors' syntax hilighting



################################################################################
#####TODO
################################################################################

#  # ~/.bashrc: executed by bash(1) for non-login shells.
#  # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
#  # or  /usr/share/doc/bash-doc/examples in the bash-doc package
#  # for examples
#
#  # If not running interactively, do not do anything
#  [[ $- != *i* ]] && return
#  ##case $- in
#  ##    *i*) ;;
#  ##      *) return;;
#  ##esac
#  # An  interactive shell is one started without non-option argu‐
#  # ments and without the -c  option  whose  standard  input  and
#  # error  are  both  connected  to  terminals  (as determined by
#  # isatty(3)), or one started with the -i option.   PS1  is  set
#  # and  $-  includes  i if bash is interactive, allowing a shell
#  # script or a startup file to test this state.







[ -n "$DEBUG_SH" ] && printf 'DEBUG (~/.shrc): this is ~/.shrc\n' >&2

################################################################################

# see /usr/share/doc/bash/examples/startup-files for examples.
# the files are located in the bash-doc package.

# the default umask is set in /etc/profile; for setting the umask
# for ssh logins, install and configure the libpam-umask package.
#umask 022


################################################################################
# general/useful functions
################################################################################

exists() { command -v "$@" >/dev/null ;}

# reload the shell (useful after config file change)
reload_shell() { exec "$SHELL" -l; }


################################################################################
# CONFIGURATION FOR ~/.local
# also see this post: http://nullprogram.com/blog/2017/06/19/
################################################################################

# PATH
PATH="$HOME/.local/bin:$PATH"
# Add directories to the include and link path for C and C++ compilers
# This is like the -I compiler option and the -L linker option, except
# there wont be a need to use them explicitly
export C_INCLUDE_PATH="$HOME/.local/include"
export CPLUS_INCLUDE_PATH="$HOME/.local/include"
export LIBRARY_PATH="$HOME/.local/lib"
export PKG_CONFIG_PATH="$HOME/.local/lib/pkgconfig"
# run time dynamic linker:
if [ -z "$LD_LIBRARY_PATH" ]
   # not sure why the IF is necessary, but termux gives me some errors otherwise
   then export LD_LIBRARY_PATH="$HOME/.local/lib"
   else export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$HOME/.local/lib"
fi
# man pages:
exists manpath || export MANPATH="$HOME/.local/share/man:$MANPATH"
  # I would expect that I had to do the following, but no,
  # it seems to seems to be able to figure it out
  # export MANPATH="$HOME/.local/share/man:$(manpath)"

################################################################################

# set PATH so it includes user's private ~/bin (if it exists)
if [ -d "$HOME/bin" ] ; then
   PATH="$HOME/bin:$PATH"
fi
export PATH

################################################################################
# INCLUDE *.sh FILES FROM ~/.config/sh-includes
################################################################################

for i in "$HOME/.config/sh-includes"/*.sh; do
    [ -n "$DEBUG_SH" ] && printf 'DEBUG (~/.shrc): including %s\n' "$i" >&2
    #shellcheck source=/dev/null
    . "$i"
done

# IF WE'RE STARTING BASH: INCLUDE *.bash FILES FROM ~/.config/sh-includes
if [ -n "$BASH_VERSION" ]; then
   for i in "$HOME/.config/sh-includes"/*.bash; do
       [ -n "$DEBUG_SH" ] && printf 'DEBUG (~/.bashrc): including %s\n' "$i" >&2
       #shellcheck source=/dev/null
       . "$i"
   done
fi

unset i

################################################################################
# IF WE HAVE A FILE NAME .sourced IN THE DIRECTORY WE START IN, SOURCE IT
################################################################################

if [ -f .sourced ]; then
   #shellcheck source=/dev/null
   . .sourced
fi

################################################################################
# EDITOR
################################################################################

if [ -z "$EDITOR" ]; then
   for i in nano+ nano pico e3pi micro emacs ne mg e3em vim vi; do
       if command -v "$i" >/dev/null; then
          EDITOR=$i
          break
       fi
   done
   unset i
fi
export EDITOR
export VISUAL="$EDITOR"
