#!/bin/sh

# Usage: $0 [-n] [EXTRA_SED_ARGS]...
#
# 🬦🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬂🬓
# ▐ 🬨🬀▌🬕🬓🬧🬀 🬴🬃▌🬲🬓▌🬨🬟🬕 🬏 🬰 ▐ 🬙 🬸 🬪 🬥 🬺 🬨 █ 🬬 ▌
# ▐ 🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭 🬃 0 1 2 3 4 5 6 7 8 9 ▌
# ▐                                         ▌
# ▐    certified        🬎 🬛 🬤 🬻 🬴 🬕    🬏 🬋  ▌
# ▐    100% silly       A B C D E F    . -  ▌
# 🬉🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬭🬄
#
# filter that substitutes each digits with a sextant,
# ie a "2x3 block" Unicode character from the
# 'Block Elements' or 'Symbols for Legacy Computing'
# blocks
#
# This is a toy and an experiment to see if it stays
# readable. Of course ideally, we'd want just one
# "pixel of space" instead of two, but that wouldn't
# be a just a substitution. Again, this is just a
# silly toy.
#
# with option -n, also substitutes . and -
# with option -x, also substitutes A,B,C,D,E,F
#                              and a,b,c,d,e,f

A=A; B=B; C=C; D=D; E=E; F=F
a=a; b=b; c=c; d=d; e=e; f=f
X='.'; M='-'
while true; do
   case $1 in
      -x) A='🬎 ' ; a=$A
           B='🬛 '; b=$B
          C='🬤 ' ; c=$C
           D='🬻 '; d=$D
          E='🬴 ' ; e=$E
           F='🬕 '; f=$F  ;;
      -n) X='🬏 ' ; M='🬋 ';;
       *) break          ;;
   esac
   shift
done

sed -e 's/0/🬰 /g'  \
     -e 's/1/▐ /g' \
    -e 's/2/🬙 /g'  \
     -e 's/3/🬸 /g' \
    -e 's/4/🬪 /g'  \
     -e 's/5/🬥 /g' \
    -e 's/6/🬺 /g'  \
     -e 's/7/🬨 /g' \
    -e 's/8/█ /g'  \
     -e 's/9/🬬 /g' \
    -e "s/A/$A/g"  -e "s/a/$a/g"  \
    -e "s/B/$B/g"  -e "s/b/$b/g"  \
    -e "s/C/$C/g"  -e "s/c/$c/g"  \
    -e "s/D/$D/g"  -e "s/d/$d/g"  \
    -e "s/E/$E/g"  -e "s/e/$e/g"  \
    -e "s/F/$F/g"  -e "s/f/$f/g"  \
    -e "s/\./$X/g" -e "s/-/$M/g"  \
    "$@"

